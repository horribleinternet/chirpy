// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addRefreshToken = `-- name: AddRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)
SELECT $1 AS token, NOW() AS created_at, NOW() AS updated_at, id AS user_id, NOW() + INTERVAL '60 DAYS' AS expires_at
FROM users WHERE email = $2
RETURNING token
`

type AddRefreshTokenParams struct {
	Token string
	Email string
}

func (q *Queries) AddRefreshToken(ctx context.Context, arg AddRefreshTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, addRefreshToken, arg.Token, arg.Email)
	var token string
	err := row.Scan(&token)
	return token, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT user_id FROM refresh_tokens WHERE token = $1
`

func (q *Queries) GetUserByToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
